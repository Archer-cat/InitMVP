apply plugin: 'com.android.application'
apply plugin: 'jacoco' //加载代码覆盖库jacoco

jacoco {
    toolVersion = "0.7.9" //代码覆盖库jacoco版本号
}

android {
    compileSdkVersion 25
    buildToolsVersion "25.0.3"
    defaultConfig {
        applicationId "com.whh.initmvp"
        minSdkVersion 15
        targetSdkVersion 25
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            testCoverageEnabled = true //实现代码覆盖率
            minifyEnabled false //获取代码覆盖率需要设为false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            testCoverageEnabled = true //实现代码覆盖率
            minifyEnabled false //获取代码覆盖率需要设为false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    testCompile 'junit:junit:4.12'

    //网络请求 okhttp3
    compile 'com.squareup.okhttp3:okhttp:3.9.1'
    //日志的拦截器
    compile 'com.squareup.okhttp3:logging-interceptor:3.9.1'
    compile 'com.squareup.okhttp3:mockwebserver:3.9.1'
    //Facebook强大的监测工具
    compile 'com.facebook.stetho:stetho-okhttp3:1.3.1'
    //Retrofit2库
    compile 'com.squareup.retrofit2:retrofit:2.3.0'
    compile 'com.squareup.retrofit2:adapter-rxjava2:2.3.0'
    //gson解析
    compile 'com.squareup.retrofit2:converter-gson:2.3.0'
    compile 'com.squareup.retrofit2:adapter-rxjava2:2.3.0'
    //rxjava2库
    compile 'io.reactivex.rxjava2:rxjava:2.0.1'
    compile 'io.reactivex.rxjava2:rxandroid:2.0.1'
    //Cookie持久化管理
    compile 'com.github.franmontiel:PersistentCookieJar:v1.0.1'

    //Glide
    compile 'com.github.bumptech.glide:glide:3.7.0'

    //recyclerview
    compile 'com.android.support:recyclerview-v7:25.+'
    compile 'com.github.CymChad:BaseRecyclerViewAdapterHelper:2.9.34'

    //eventbus3
    compile project(':eventbus3')

//    //arouter
//    annotationProcessor 'com.alibaba:arouter-compiler:1.1.4'

    //代码覆盖率jacoco
//    compile 'org.jacoco:org.jacoco.core:0.7.9'


}

//代码覆盖率相关配置 start
def coverageSourceDirs = [
        '../app/src/main/java'
]

task jacocoTestReport(type: JacocoReport) {
    group = "Reporting"
    description = "Generate Jacoco coverage reports after running tests."

    reports {
        xml.enabled = true
        html.enabled = true
    }

    //build\intermediates\javac\debug\compileDebugJavaWithJavac\classes\com\irisking\gacloud\api
    classDirectories = fileTree(
            //检测覆盖率的class所在目录(以项目class所在目录为准)
            dir: './build/intermediates/classes/debug', //gradle2.3 class所在目录
            //gradle3.2 class所在目录 dir: './build/intermediates/javac/debug/compileDebugJavaWithJavac/classes',
            //排除以上目录中不检测的文件列表
            excludes: ['**/R*.class',
                       '**/*$InjectAdapter.class',
                       '**/*$ModuleAdapter.class',
                       '**/*$ViewInjector*.class'
            ]
    )

    sourceDirectories = files(coverageSourceDirs) //设置需要检测覆盖率的目录
    executionData = files("$buildDir/outputs/code-coverage/connected/initmvp_coverage.ec") //存储APP运行时产生报告的目录

//    doFirst {
//        new File("$buildDir/intermediates/classes/").eachFileRecurse { file ->
//            if (file.name.contains('$$')) {
//                file.renameTo(file.path.replace('$$', '$'))
//            }
//        }
//    }
}
//代码覆盖率相关配置 end